<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\S32K144_App_Debug.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\S32K144_App_Debug.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jul 01 10:07:49 2025
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vTask2 &rArr;  vTask2 (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[5]">vTask2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">vTask2</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ADC0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3b]">ADC1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[62]">CAN0_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[64]">CAN0_ORed_0_15_MB_IRQHandler</a> from hal_can.o(i.CAN0_ORed_0_15_MB_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[65]">CAN0_ORed_16_31_MB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[61]">CAN0_ORed_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[63]">CAN0_Wake_Up_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[69]">CAN1_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6b]">CAN1_ORed_0_15_MB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[68]">CAN1_ORed_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[70]">CAN2_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[72]">CAN2_ORed_0_15_MB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6f]">CAN2_ORed_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3c]">CMP0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[13]">DMA0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1d]">DMA10_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1e]">DMA11_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1f]">DMA12_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[20]">DMA13_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[21]">DMA14_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[22]">DMA15_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[14]">DMA1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[15]">DMA2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[16]">DMA3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[17]">DMA4_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[18]">DMA5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[19]">DMA6_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1a]">DMA7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1b]">DMA8_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1c]">DMA9_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[23]">DMA_Error_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8e]">DefaultISR</a> from startup_s32k144.o(.text) referenced 116 times from startup_s32k144.o(RESET)
 <LI><a href="#[40]">ERM_double_fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3f]">ERM_single_fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[58]">FLEXIO_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[28]">FTFC_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[25]">FTFC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[76]">FTM0_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[77]">FTM0_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[78]">FTM0_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[79]">FTM0_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7a]">FTM0_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7b]">FTM0_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7c]">FTM1_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7d]">FTM1_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7e]">FTM1_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7f]">FTM1_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[80]">FTM1_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[81]">FTM1_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[82]">FTM2_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[83]">FTM2_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[84]">FTM2_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[85]">FTM2_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[86]">FTM2_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[87]">FTM2_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[88]">FTM3_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[89]">FTM3_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8a]">FTM3_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8b]">FTM3_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8c]">FTM3_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8d]">FTM3_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2b]">LPI2C0_Master_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2c]">LPI2C0_Slave_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[43]">LPIT0_Ch0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[44]">LPIT0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[45]">LPIT0_Ch2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[46]">LPIT0_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2d]">LPSPI0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2e]">LPSPI1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2f]">LPSPI2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4d]">LPTMR0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[32]">LPUART0_RxTx_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[34]">LPUART1_RxTx_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[36]">LPUART2_RxTx_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[27]">LVD_LVW_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[24]">MCM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[47]">PDB0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[57]">PDB1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4e]">PORTA_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4f]">PORTB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[50]">PORTC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[51]">PORTD_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[52]">PORTE_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2a]">RCM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[41]">RTC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[42]">RTC_Seconds_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[26]">Read_Collision_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[67]">Reserved100_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6a]">Reserved103_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6c]">Reserved105_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6d]">Reserved106_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6e]">Reserved107_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[71]">Reserved110_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[73]">Reserved112_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[74]">Reserved113_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[75]">Reserved114_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[30]">Reserved45_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[31]">Reserved46_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[33]">Reserved48_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[35]">Reserved50_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[37]">Reserved52_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[38]">Reserved53_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[39]">Reserved54_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3d]">Reserved58_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3e]">Reserved59_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[48]">Reserved69_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[49]">Reserved70_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4a]">Reserved71_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4b]">Reserved72_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[54]">Reserved81_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[55]">Reserved82_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[56]">Reserved83_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[59]">Reserved86_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5a]">Reserved87_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5b]">Reserved88_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5c]">Reserved89_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5d]">Reserved90_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5e]">Reserved91_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5f]">Reserved92_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[60]">Reserved93_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[66]">Reserved99_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4c]">SCG_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[53]">SWI_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1]">SystemInit</a> from system_s32k144.o(i.SystemInit) referenced from startup_s32k144.o(.text)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[29]">WDOG_EWM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_s32k144.o(.text)
 <LI><a href="#[2]">init_data_bss</a> from startup.o(i.init_data_bss) referenced from startup_s32k144.o(.text)
 <LI><a href="#[0]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[8]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[4]">vTask1</a> from main.o(i.vTask1) referenced from main.o(i.main)
 <LI><a href="#[5]">vTask2</a> from main.o(i.vTask2) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[94]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fa]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[fe]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ff]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ef]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN0_ORed_16_31_MB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN0_ORed_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN1_ORed_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAN2_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_ORed_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ERM_double_fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ERM_single_fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FLEXIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FTFC_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FTFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FTM0_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FTM0_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FTM0_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FTM0_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FTM0_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>FTM0_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>FTM1_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FTM1_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FTM1_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FTM1_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>FTM1_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>FTM1_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>FTM2_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>FTM2_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>FTM2_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>FTM2_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>FTM2_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>FTM2_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>FTM3_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>FTM3_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>FTM3_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>FTM3_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>FTM3_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>FTM3_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPI2C0_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPI2C0_Slave_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPIT0_Ch0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPIT0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LPIT0_Ch2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>LPIT0_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>LPUART0_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPUART1_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>LPUART2_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PDB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Reserved100_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved103_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Reserved105_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved106_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved107_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Reserved110_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Reserved112_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>Reserved113_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>Reserved114_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Reserved48_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Reserved50_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Reserved52_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>Reserved58_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Reserved69_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Reserved72_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved89_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Reserved90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Reserved99_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanRx_Management_Process
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_App_Start_Flash_Data_Check_Function
</UL>

<P><STRONG><a name="[95]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[106]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>Bsp_System_Clock_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, clocks_and_modes.o(i.Bsp_System_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_System_Clock_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>Bsp_Wdog_Disable_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clocks_and_modes.o(i.Bsp_Wdog_Disable_Init))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>CAN0_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, hal_can.o(i.CAN0_ORed_0_15_MB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN0_ORed_0_15_MB_IRQHandler &rArr; Hal_CanSetQueueBufferMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanSetQueueBufferMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>Hal_App_Start_Flash_Data_Check_Function</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hal_flash.o(i.Hal_App_Start_Flash_Data_Check_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hal_App_Start_Flash_Data_Check_Function &rArr; FLASH_DRV_EraseSector &rArr; FLASH_DRV_CommandSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_Program (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_EraseSector (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Hal_CAN0_Send_Data_Function</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_can.o(i.Hal_CAN0_Send_Data_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_CAN0_Send_Data_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Can_Tx_Cycle_Function
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanRx_Management_Process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanDataTransmit_Function
</UL>

<P><STRONG><a name="[a2]"></a>Hal_CanDriverReceiveWaitFunction</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hal_can.o(i.Hal_CanDriverReceiveWaitFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_CanDriverReceiveWaitFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Diagnostic_Protocol_CycleProcess
</UL>

<P><STRONG><a name="[b7]"></a>Hal_Dma_Init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hal_dma.o(i.Hal_Dma_Init))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>Hal_Dma_Start_Function</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_dma.o(i.Hal_Dma_Start_Function))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Hal_Flash_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_flash.o(i.Hal_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Hal_Flash_Init &rArr; FLASH_DRV_Init &rArr; FLASH_DRV_GetDEPartitionCode
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>Hal_FlexCan_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_can.o(i.Hal_FlexCan_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_FlexCan_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_FlexCan0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Hal_GoTo_BootLoader_Flash_Erase_Function</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_flash.o(i.Hal_GoTo_BootLoader_Flash_Erase_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Hal_GoTo_BootLoader_Flash_Erase_Function &rArr; FLASH_DRV_EraseSector &rArr; FLASH_DRV_CommandSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_Program (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_EraseSector (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serivice0x10Process
</UL>

<P><STRONG><a name="[b6]"></a>Hal_Led_Gpio_Confg_Init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, hal_gpio.o(i.Hal_Led_Gpio_Confg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>Hal_Task_Can_Tx_Cycle_Function</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_can.o(i.Hal_Task_Can_Tx_Cycle_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Task_Can_Tx_Cycle_Function &rArr; Hal_CAN0_Send_Data_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CAN0_Send_Data_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask1
</UL>

<P><STRONG><a name="[a0]"></a>INT_SYS_DisableIRQGlobal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_DisableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_GoTo_BootLoader_Flash_Erase_Function
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanDriverReceiveWaitFunction
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanSetQueueBufferMessage
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_App_Start_Flash_Data_Check_Function
</UL>

<P><STRONG><a name="[a1]"></a>INT_SYS_EnableIRQGlobal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_EnableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_GoTo_BootLoader_Flash_Erase_Function
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanDriverReceiveWaitFunction
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanSetQueueBufferMessage
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_App_Start_Flash_Data_Check_Function
</UL>

<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_s32k144.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_System_Clock_Init
</UL>

<P><STRONG><a name="[1]"></a>SystemInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_s32k144.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>SystemSoftwareReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_s32k144.o(i.SystemSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serivice0x10Process
</UL>

<P><STRONG><a name="[af]"></a>UdsServiceProcessFunction</STRONG> (Thumb, 170 bytes, Stack size 88 bytes, uds_service.o(i.UdsServiceProcessFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UdsServiceProcessFunction &rArr; Serivice0x10Process &rArr; Uds_CanDataTransmit_Function &rArr; Hal_CAN0_Send_Data_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Tp_ResetSession_Timer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanDataTransmit_Function
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serivice0x11Process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serivice0x10Process
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Diagnostic_Protocol_CycleProcess
</UL>

<P><STRONG><a name="[ac]"></a>Uds_CanDataTransmit_Function</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, uds_tp.o(i.Uds_CanDataTransmit_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Uds_CanDataTransmit_Function &rArr; Hal_CAN0_Send_Data_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CAN0_Send_Data_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsServiceProcessFunction
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serivice0x11Process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serivice0x10Process
</UL>

<P><STRONG><a name="[b4]"></a>Uds_CanTx_FlowControlFrame_Management</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uds_tp.o(i.Uds_CanTx_FlowControlFrame_Management))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Diagnostic_Protocol_CycleProcess
</UL>

<P><STRONG><a name="[b2]"></a>Uds_Diagnostic_Protocol_CycleProcess</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, uds_tp.o(i.Uds_Diagnostic_Protocol_CycleProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Uds_Diagnostic_Protocol_CycleProcess &rArr; UdsServiceProcessFunction &rArr; Serivice0x10Process &rArr; Uds_CanDataTransmit_Function &rArr; Hal_CAN0_Send_Data_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_Hal_Ret_Can_Rx_Queue_Message
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanDriverReceiveWaitFunction
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanTx_FlowControlFrame_Management
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanRx_Management_Process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsServiceProcessFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask2
</UL>

<P><STRONG><a name="[aa]"></a>Uds_Tp_ResetSession_Timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uds_tp.o(i.Uds_Tp_ResetSession_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsServiceProcessFunction
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serivice0x10Process
</UL>

<P><STRONG><a name="[107]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[108]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[109]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2]"></a>init_data_bss</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, startup.o(i.init_data_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_data_bss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Gpio_Confg_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_FlexCan_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Dma_Start_Function
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Dma_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_App_Start_Flash_Data_Check_Function
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Wdog_Disable_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_System_Clock_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b3]"></a>pt_Hal_Ret_Can_Rx_Queue_Message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_can.o(i.pt_Hal_Ret_Can_Rx_Queue_Message))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Diagnostic_Protocol_CycleProcess
</UL>

<P><STRONG><a name="[e0]"></a>pvPortMalloc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[d0]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[bc]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[e9]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_hooks.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[f8]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_hooks.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[cb]"></a>vApplicationIdleHook</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_hooks.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[e3]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_hooks.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ed]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_hooks.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[f7]"></a>vApplicationTickHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_hooks.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[c1]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[cf]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[be]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[bd]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[c0]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[c2]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[ca]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[ee]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[e4]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[c5]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[da]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[4]"></a>vTask1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.vTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTask1 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Can_Tx_Cycle_Function
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5]"></a>vTask2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.vTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = vTask2 &rArr;  vTask2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Diagnostic_Protocol_CycleProcess
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask2
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[e7]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask2
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask1
</UL>

<P><STRONG><a name="[f3]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[df]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[e8]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[e6]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[ba]"></a>vTaskStartScheduler</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[96]"></a>vTaskSwitchContext</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[ec]"></a>xPortStartScheduler</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[c4]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[cd]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[f1]"></a>xQueueGenericSend</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[f5]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[d6]"></a>xQueueReceive</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[f4]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b9]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>xTaskCreateStatic</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[f2]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[db]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[ae]"></a>xTaskIncrementTick</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c8]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[de]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[d9]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[eb]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[d5]"></a>xTimerGenericCommand</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[8f]"></a>FLASH_DRV_EraseSector</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, flash_driver.o(i.FLASH_DRV_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_DRV_EraseSector &rArr; FLASH_DRV_CommandSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_CommandSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_GoTo_BootLoader_Flash_Erase_Function (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_App_Start_Flash_Data_Check_Function (via Veneer)
</UL>

<P><STRONG><a name="[91]"></a>FLASH_DRV_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash_driver.o(i.FLASH_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_DRV_Init &rArr; FLASH_DRV_GetDEPartitionCode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_GetDEPartitionCode
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Init (via Veneer)
</UL>

<P><STRONG><a name="[93]"></a>FLASH_DRV_Program</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, flash_driver.o(i.FLASH_DRV_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_DRV_Program &rArr; FLASH_DRV_CommandSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_CommandSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_GoTo_BootLoader_Flash_Erase_Function (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_App_Start_Flash_Data_Check_Function (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c6]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[c7]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[cc]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[d2]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[dd]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[bb]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[bf]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[c9]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[7]"></a>prvIdleTask</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[ce]"></a>prvInitialiseNewTask</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[f6]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[c3]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[d1]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[d3]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[d7]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[d4]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[dc]"></a>prvSwitchTimerLists</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[8]"></a>prvTimerTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvTimerTask &rArr; prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[6]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[e1]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[e2]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[9d]"></a>Hal_CanSetQueueBufferMessage</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hal_can.o(i.Hal_CanSetQueueBufferMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Hal_CanSetQueueBufferMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_0_15_MB_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>Hal_FlexCan0_Init</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, hal_can.o(i.Hal_FlexCan0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_FlexCan_Init
</UL>

<P><STRONG><a name="[a9]"></a>Serivice0x10Process</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, uds_service.o(i.Serivice0x10Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Serivice0x10Process &rArr; Uds_CanDataTransmit_Function &rArr; Hal_CAN0_Send_Data_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_GoTo_BootLoader_Flash_Erase_Function
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Tp_ResetSession_Timer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanDataTransmit_Function
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsServiceProcessFunction
</UL>

<P><STRONG><a name="[ad]"></a>Serivice0x11Process</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, uds_service.o(i.Serivice0x11Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Serivice0x11Process &rArr; Uds_CanDataTransmit_Function &rArr; Hal_CAN0_Send_Data_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_CanDataTransmit_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsServiceProcessFunction
</UL>

<P><STRONG><a name="[b0]"></a>Uds_CanRx_Management_Process</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, uds_tp.o(i.Uds_CanRx_Management_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uds_CanRx_Management_Process &rArr; Hal_CAN0_Send_Data_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CAN0_Send_Data_Function
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_Diagnostic_Protocol_CycleProcess
</UL>

<P><STRONG><a name="[90]"></a>FLASH_DRV_CommandSequence</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flash_driver.o(i.FLASH_DRV_CommandSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_DRV_CommandSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_Program
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_EraseSector
</UL>

<P><STRONG><a name="[92]"></a>FLASH_DRV_GetDEPartitionCode</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, flash_driver.o(i.FLASH_DRV_GetDEPartitionCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_DRV_GetDEPartitionCode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DRV_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
